#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <pthread.h>
#include <semaphore.h>
#include <sys/sem.h>
#define WAIT_TIME 2

/*
 * CS356 Operating System Project 1 Problem 4: 
 *         Burger Buddies Problem
 *
 * a simple multithread program using semaphores
 * in order to solve the burgur buddies problem
 *
 *      auther: Ma Yesheng 5140209064
 */

// declarations of thread functions
void *cook_func(void *args);
void *cashier_func(void *args);
void *customer_func(void *args);

// declaration of global variables
int cook_size;
int cashier_size;
int customer_size;
int rack_size;
int burger_cnt;
int remain_cnt;

// declarations for semaphores
sem_t console_mutex;
sem_t burger_cnt_mutex;
sem_t remain_cnt_mutex;
sem_t rack;
sem_t burger_on_rack;
sem_t customer_order;
sem_t cashier_serve;

int main(int argc, char **argv)
{
    // fetch arguments and validity test
    int i;
    if (argc != 5) {
        printf("USAGE: four arguments cook, cashier, customer, rack_size\n");
        return -1;
    }
    cook_size = (int)strtol(argv[1], NULL, 10);
    cashier_size = (int)strtol(argv[2], NULL, 10);
    customer_size = (int)strtol(argv[3], NULL, 10);
    rack_size = (int)strtol(argv[4], NULL, 10);
    if (cook_size<=0 || cashier_size<=0 || customer_size<=0 || rack_size<=0) {
        printf("invalid argument\n");
        return -1;
    }

    srand(time(NULL));
    printf("cook[%d], cashier[%d], customer[%d], rack[%d]\n",
            cook_size, cashier_size, customer_size, rack_size);
    printf("====== Burger Buddies Begin ======\n");
    
    // initialize global variables
    burger_cnt = 0;
    remain_cnt = customer_size;
    
    // initialize semaphores
    sem_init(&console_mutex, 0, 1);
    sem_init(&burger_cnt_mutex, 0, 1);
    sem_init(&rack, 0, rack_size);
    sem_init(&customer_order, 0, 0);
    sem_init(&cashier_serve, 0, 0);
    sem_init(&remain_cnt_mutex, 0, customer_size);
    sem_init(&burger_on_rack, 0, 0);
    
    // create threads
    int *cook_args = malloc(cook_size*sizeof(int));
    int *cashier_args = malloc(cashier_size*sizeof(int));
    int *customer_args= malloc(customer_size*sizeof(int));
    pthread_t *cook_thread = malloc(cook_size*sizeof(pthread_t));
    pthread_t *cashier_thread = malloc(cashier_size*sizeof(pthread_t));
    pthread_t *customer_thread = malloc(customer_size*sizeof(pthread_t));
    
    for (i = 0; i < cook_size; ++i) {
        cook_args[i] = i+1;
        pthread_create(cook_thread+i, NULL, cook_func, cook_args+i);
    }
    for (i = 0; i < cashier_size; ++i) {
        cashier_args[i] = i+1;
        pthread_create(cashier_thread+i, NULL, cashier_func, cashier_args+i);
    }
    for (i = 0; i < customer_size; ++i) {
        customer_args[i] = i+1;
        pthread_create(customer_thread+i, NULL, customer_func, customer_args+i);
    }
    
    // join threads
    for (i = 0; i < cook_size; ++i)
        pthread_join(cook_thread[i], NULL);
    for (i = 0; i < cashier_size; ++i)
        pthread_join(cashier_thread[i], NULL);
    for (i = 0; i < customer_size; ++i)
        pthread_join(customer_thread[i], NULL);

    printf("====== Burger Buddies Finish ======\n");
    
    // destroy semaphores
    sem_destroy(&console_mutex);
    sem_destroy(&burger_cnt_mutex);
    sem_destroy(&rack);
    sem_destroy(&customer_order);
    sem_destroy(&cashier_serve);
    sem_destroy(&remain_cnt_mutex);
    sem_destroy(&burger_on_rack);
    
    // free resources
    free(cook_args);
    free(cashier_args);
    free(customer_args);
    free(cook_thread);
    free(cashier_thread);
    free(customer_thread);
	
	return 0;
}

/*
 * cook thread definition:
 *   1. check if enough burgers have been produced
 *   2. wait for empty rack
 *   3. produce burger and put on rack
 */
void *cook_func(void *args)
{
    int cook_id = *(int *) args;
    while (1) {
        sleep(rand()%WAIT_TIME);
        sem_wait(&burger_cnt_mutex);
        if (burger_cnt >= customer_size) {
            sem_post(&burger_cnt_mutex);
            break;
        } else {
            burger_cnt++;
            sem_post(&burger_cnt_mutex);
        }
        sem_wait(&console_mutex);
        printf("cooker[%d] makes a burger\n", cook_id);
        sem_post(&console_mutex);
        sem_wait(&rack);
        sem_post(&burger_on_rack);
    }
    return NULL;
}

/*
 * definiton of cashier thread:
 *   1. check if all customers have been served
 *   2. wait for a customer to come
 *   3. wait for burger to be put on rack
 *   4. decrement the number of burgers in rack
 *   5. take burger to customer
 */
void *cashier_func(void *args)
{
    int cashier_id = *(int *) args;
    while (1) {
        sem_wait(&remain_cnt_mutex);
        if (remain_cnt == 0) {
            sem_post(&remain_cnt_mutex);
            break;
        } else {
            remain_cnt--;
            sem_post(&remain_cnt_mutex);
        }
        sem_wait(&customer_order);
        sem_wait(&console_mutex);
        printf("cashier[%d] accepts order\n", cashier_id);
        sem_post(&console_mutex);
        sem_wait(&burger_on_rack);
        sem_post(&rack);
        sem_post(&cashier_serve);
        sem_wait(&console_mutex);
        printf("cashier[%d] takes a burger to customer\n", cashier_id);
        sem_post(&console_mutex);
    }
    return NULL;
}

/*
 * customer_thread:
 *   1. inform a cashier of arrival and order
 *   2. wait for a burger to be taken
 *   3. leave
 */
void *customer_func(void *args)
{
    int customer_id = *(int *) args;
    sleep(rand()%WAIT_TIME);
    sem_wait(&console_mutex);
    printf("customer[%d] comes\n", customer_id);
    sem_post(&console_mutex);
    sem_post(&customer_order);
    sem_wait(&cashier_serve);
    return NULL;
}

